<script src="http://localhost:8080/application.js" type="text/javascript" charset="utf-8"></script>

<script type="text/javascript" charset="utf-8">

// Initialize the all-important game object, where all the card data and such
// is stored.
var GAME = {};
var HANDLE = "<%= @handle %>";
var SUITS = {"s": "Spades", "h": "Hearts", "c": "Clubs", "d": "Diamonds"};
var SUIT_CHARS = {"s": "&spades;", "h": "&hearts;", "c": "&clubs;", "d": "&diams;"};
var SUIT_COLORS = {"s": "#000000", "d": "#ff0000", "c": "#000000", "h": "#ff0000"};
var timeout_id = null;

$(document).ready(function() {

	// Hook up the push connection.
	var jug = new Juggernaut;
    jug.subscribe("<%= @match_id %>", function(data) {
        delegate(data);
    });
    jug.on("connect", function() {
        pub("register", {handle: HANDLE});
    });

	// Delegate events coming from the server depending on the type of action.
	var delegate = function(data) {
		data = JSON.parse(data);
		if (data.match)
			GAME = JSON.parse(data.match);
		switch (data.type) {
			case "message":
				kibbitz("<strong>" + data.sender + "</strong>: <span>" + data.content + "</span>");
				break;
			case "registered":
				logger("<code>" + data.player + "</code> has successfully registered.");
				if (GAME.current_player)
					refresh();
				break;
			case "start":
				logger("There are now four players and the game has begun. It is <code>" + GAME.current_player + "</code>'s turn to choose trump.");
				logger("<strong>For this round, your playing partner will be <code>" + GAME.pairs[HANDLE] + "</code>.</strong>")
				if (is_my_turn())
					prompt_to_choose_trump();
				break;
			case "part":
				logger("<code>" + data.player + "</code> has left the game.");
				break;
			case "trump_chosen":
				logger("<code>" + GAME.current_player + "</code> has chosen <strong>" + SUITS[GAME.trump] + "</strong> as trump. Let the game begin!");
				if (is_my_turn())
					logger("It's your turn to start the game. <strong>Choose your first card!</strong>");
				$("#stats").show();
				$("#trump").html(SUIT_CHARS[GAME.trump]).css("color", SUIT_COLORS[GAME.trump]);
				refresh();
				break;
			case "card_played":
				var latest_play = GAME.current_trick[GAME.current_trick.length - 1];
				refresh();
				break;
			case "game_over":
				window.location = "/matches/game_over/" + GAME.id;
				break;
		}
	};
	
	// Manage the chat window.
	var kibbitz = function(msg) {
		var current_length = $("#kibbitz li").size();
		if (current_length >= 5)
			$("#kibbitz li:eq(0)").remove();
		$("<li>").html(msg).appendTo($("#kibbitz"));
	};
	
	// Special messages from the server.
	var logger = function(msg) {
		kibbitz("<em>[msg]:</em> " + msg);
	}
	
	// Publish events and actions to the server.
	var pub = function(url, data) {
		$.post("/matches/" + url, Object.extend({id: "<%= @match_id %>"}, data));
	};
	
	// Send chat messages.
	var message = function(content) {
		pub("message", {content: content, handle: HANDLE});
	};
	
	// Fire messages on ENTER key on input.
	$("#console input").keydown(function(e) {
		if (e.keyCode == "13") {
			message($(this).val());
			$(this).val("");
			return false;
		};
	});
	
	var prompt_to_choose_trump = function() {
		draw_my_hand();
		alert("Please choose trump by double clicking the card from your strongest suit.");
	};
	
	prompt_to_play_card = function() {
		timeout_id = setTimeout("prompt_to_play_card()", 1000);
		$("#score .card .front").last().effect("highlight", {color: "yellow"}, 1000);
	};
	
	var draw_my_hand = function() {
		draw_hand(sorted(my_hand(), GAME.trump));
	}

	var my_hand = function() {
		return GAME.hands[HANDLE];
	};
	
	var is_my_turn = function() {
		return HANDLE == GAME.current_player;
	};
	
	var refresh = function() {
		if (GAME.trump) {
			draw_my_hand();
		};
		if (is_my_turn())
			prompt_to_play_card();
		draw_score_cards();
		$("#score .card .front").last().effect("highlight", {color: "yellow"}, 1000);
		update_scores();
	};
	
	var playable = function(card) {
		var message = false;
		var suit = suit_and_rank(card)[0];
		if (GAME.current_trick.length > 0 && GAME.current_trick.length < 4) {
			var lead_suit = suit_and_rank(GAME.current_trick[0][1])[0];
			if (have_lead_suit_cards(lead_suit) && suit != lead_suit) {
				message = "You must follow suit!";
			};
		};
		
		if (!is_my_turn()) {
			message = "You can't play a card because it's not your turn!"
		};
		
		return (message || true);
	};
	
	var have_lead_suit_cards = function(lead_suit) {
		my_suits = my_hand().map(function(c) { return suit_and_rank(c)[0] })
		return (my_suits.indexOf(lead_suit) != -1);
	};
	
	var draw_score_cards = function() {
		var trick = GAME.current_trick;
		$("#score .card").remove();
		for (i in trick) {
			var c = draw_card(trick[i][1], i * 4.5, null, "#score");
			if (trick[i][0] == GAME.pairs[HANDLE]) {
				var color = "#0066AA";
				var weight = "bold";
			} else {
				var color = "black";
				var weight = "normal";
			};
			$(c).append('<div class="score_card_name" style="position: relative; top: 95px; font-size: 10px; font-weight: ' + weight + '; color: ' + color + '">' + trick[i][0] + '</div>');
			
		}
	};
	
	var update_scores = function() {
		var my_score = GAME.scores[HANDLE];
		var their_score = GAME.points_earned - my_score;
		var left = 13 - GAME.finished_tricks.length;
		$("#good_guys").html(my_score);
		$("#bad_guys").html(their_score);
		$("#left").html(left);
	};
	
	$(window).bind("beforeunload", function() { 
	    pub("part", {handle: HANDLE});
	})
	
	// Remove me from the game when I close the window.
	$(window).unload(function () {
	 	pub("part", {handle: HANDLE});
	});
	
	$(".card").live("dblclick", function() {
		if (GAME.paused) {
			alert("Can't do that until there are four players. Get 'em back here!");
			return false;
		};
		var card = $(this).attr("id");
		if (GAME.trump == null) {
			pub("choose_trump", {card: card});
		} else {
			true_or_errors = playable(card);
			if (true_or_errors == true) {
				pub("play_card", {handle: HANDLE, card: card});
			} else {
				alert(true_or_errors);
			};
		};
		if (timeout_id)
			clearTimeout(timeout_id);
	});
});

</script>

<div id="board">
	<div id="trump"></div>
	<div id="card_template" class="card" style="left:30em;top:0em;display:none;z-index:10">
	  <div class="front">
	    <div class="index"></div>
		<img class="face" src="" alt="" width="80" height="130" />
		<div class="spot"></div>
		<div class="ace"></div>
	  </div> 
	</div>
</div>

<div id="meta">
	<div id="chat">
		<ul id="kibbitz">
		</ul>
		<div id="console">&gt; <input type="text"/></div>
	</div>
	
	<div id="score">
	</div>
	
	<div id="stats">
		<span id="good_guys">4</span> -
		<span id="bad_guys">5</span>
		<em>with <span id="left">12</span> tricks left</em>
	</div>
</div>